name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    # Node.js projects
    - name: Setup Node.js
      if: hashFiles('**/package.json') != ''
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: ${{ hashFiles('**/package-lock.json') != '' && 'npm' || '' }}
    
    - name: Install Node.js dependencies
      if: hashFiles('**/package.json') != ''
      run: npm ci
    
    - name: Run Node.js tests
      if: hashFiles('**/package.json') != ''
      run: npm test
    
    - name: Run Node.js build
      if: hashFiles('**/package.json') != ''
      run: npm run build
      
    # Rust projects
    - name: Setup Rust
      if: hashFiles('**/Cargo.toml') != ''
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      if: hashFiles('**/Cargo.toml') != ''
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run Rust tests
      if: hashFiles('**/Cargo.toml') != ''
      run: cargo test
    
    - name: Run Rust build
      if: hashFiles('**/Cargo.toml') != ''
      run: cargo build --release
    
    - name: Check Rust formatting
      if: hashFiles('**/Cargo.toml') != ''
      run: cargo fmt -- --check
    
    - name: Run Rust clippy
      if: hashFiles('**/Cargo.toml') != ''
      run: cargo clippy -- -D warnings
      
    # Python projects
    - name: Setup Python
      if: hashFiles('**/requirements.txt') != '' || hashFiles('**/pyproject.toml') != '' || hashFiles('**/setup.py') != ''
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Python dependencies
      if: hashFiles('**/requirements.txt') != ''
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install Python project
      if: hashFiles('**/pyproject.toml') != '' || hashFiles('**/setup.py') != ''
      run: pip install -e .
    
    - name: Run Python tests
      if: hashFiles('**/requirements.txt') != '' || hashFiles('**/pyproject.toml') != '' || hashFiles('**/setup.py') != ''
      run: |
        if [ -f pytest.ini ] || [ -f pyproject.toml ] || [ -f setup.cfg ]; then
          pytest
        else
          python -m pytest
        fi
      
    # Go projects
    - name: Setup Go
      if: hashFiles('**/go.mod') != ''
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Run Go tests
      if: hashFiles('**/go.mod') != ''
      run: go test ./...
    
    - name: Run Go build
      if: hashFiles('**/go.mod') != ''
      run: go build ./...
      
    # Generic linting (if applicable)
    - name: Run pre-commit hooks
      if: hashFiles('**/.pre-commit-config.yaml') != ''
      uses: pre-commit/action@v3.0.0